# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][col]), " SD -> ", sd(ls[[i]][col])))
}
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][1]), " SD -> ", sd(ls[[i]][1])))
}
ls[[i]][1]
mean(ls[[i]][1])
mean(ls[[1]][1])
ls[[i]][[1]]
mean(ls[[i]][[1]])
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
}
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
}
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
mean_sd_all(sent_list, 1)
mean_sd_all(sent_list)
res <- numeric(0)
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
matrix()
}
names(sent_list)
sent_list[1]
sent_list[1,][1]
sent_list[1,]
sent_list[1][1]
sent_list[[1]]
sent_list[[1]][1]
sent_list[[1]]
sent_list[[1]][1][1]
sent_list[[1]][[1]]
sent_list[[1]][[1]][1]
house_sent
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
as.data.frame(res)
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
res <- mean_sd_all(sent_list)
res
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
res <- as.data.frame(res)
names(res) <- c("Mean","SD")
res
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
res <- mean_sd_all(sent_list)
res
# add index col
cbind(seq_len(nrow(res)), res)
names(res)[1]
# add index col
res <- cbind(seq_len(nrow(res)), res)
names(res)[1]
names(res)[1] <- "Index"
res
res %>% arrange(desc(mean))
res %>% arrange(desc(Mean))
# sort high to low mean
res <- res %>% arrange(desc(Mean))
unique(sent_list$Category.x)
unique(senti_updated$Category.x)
names_categories <- unique(senti_updated$Category.x)
# make names of categories
names_categories <- unique(senti_updated$Category.x)
# sort high to low mean
res <- res %>% arrange(desc(Mean))
res
# sort the names
names_categories[res$Index]
res
res
names_categories
names_categories[-11]
# unsorted categories
names_categories[-11]
# sort the names
names_categories[res$Index]
# unsorted categories
names_categories[-11]
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE)
t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE)
}
# sort the names
names_categories[res$Index]
greaterTTest(juv_sent, fam_sent)
greaterTTest(house_sent,edu_sent)
greaterTTest(juv_sent, fam_sent)
juv_sent
fam_sent
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE)
t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE)
}
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
print(t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE))
print(t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE))
}
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# sort the names
names_categories[res$Index]
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
#
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
#
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
greaterTTest(consumer_sent$sentiment, health_sent$sentiment)
greaterTTest(health_sent$sentiment, work_sent$sentiment)
greaterTTest(work_sent$sentiment, house_sent$sentiment)
greaterTTest(house_sent$sentiment,edu_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
## special case needed to check
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
# HIGH P VALUE
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
# HIGH P VALUE
greaterTTest(consumer_sent$sentiment, health_sent$sentiment)
greaterTTest(health_sent$sentiment, work_sent$sentiment)
greaterTTest(work_sent$sentiment, house_sent$sentiment)
# HIGH P VALUE
greaterTTest(house_sent$sentiment,edu_sent$sentiment)
prop.test(x = c(39963, 130929), n = c(28487, 57040))
prop.test(x = c(39963, 130929), n = c(68450, 187969))
help(prop.test)
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), y = c(73724, 113574), alternative = "g")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: more female proportion clients in family households
# vs individual households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "t")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "l")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "g")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: more female proportion clients in family households
# vs individual households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: less female proportion clients in individual households
# vs family households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
rm()
ls()
rm(ls())
rm(list = ls())
help("cooks.distance")
setwd("C:/Users/lavil/source/repos/LukVill/code/R/stats101a/HW5")
getwd()
arms <- read.csv(file = paste0(getwd(),"/armspans2022_gender.csv"), header = TRUE)
library(tidyverse)
glimpse(arms)
lm(armspan~height, data = armspan)
lm(armspan~height, data = arms)
summary(lm(armspan~height, data = arms))
m1 <- lm(armspan~height, data = arms)
summary(m1)
corr(m1)
cor(m1)
attributes(m1)
summary(m1)
attributes(m1)
summary(m1)
anova(m1)
summary(m1)
anova(m1)
2.135^2
attributes(m1)
summary(m1)
summary(m1)
anova(m1)
summary(m1)
anova(m1)
nrow(m1)
arms
summary(m1)
anova(m1)
summary(m1)
any(is.na(arms$height))
any(is.na(arms$armspan))
which(is.na(arms$armspan))
arms[33,]
armspan <- arms[-33,]
m2 <- lm(armspan~height, data = armspan)
summary(m2)
anova(m1)
arms <- read.csv(file = paste0(getwd(),"/armspans2022_gender.csv"), header = TRUE)
glimpse(arms)
sum(arms$is.female)/nrow(arms)
sum(arms$is.female)
nrow(arms)
any(is.na(arms$is.female))
# proportion of females
sum(arms$is.female)/nrow(arms)
m2 <- lm(armspan ~ is.female, data = arms)
plot(m2)
m2$coefficients
## d.
t.test(m1)
## d.
t.test(m2)
t.test(m2)
help(t.test)
summar(m2)
summary(m2)
iowa <- read.delim(file = paste0(getwd(),"/iowatest.txt"), header = TRUE)
iowa
colnames(iowa)
glimpse(iowa)
# get iowa city schools
iowaCity <- subset(iowa, City == "Iowa City")
iowaCity
glimpse(iowaCity)
factor(iowa$City)
factor(iowa$City).levels
levels(factor(iowa$City))
help(relevel)
test <- factor(c(1,1,1,1,2,3))
levels(test)
test
relevel(test, c(3,2,1))
test <- factor(test, levels = c(3,2,1))
test
levels(factor(iowa$City))
colnames(iowa)
test<-factor(c(1,1,1,2,3), levels = 2)
test
help(relevel)
help(reorder)
relevel(test, 3)
test<-factor(c(1,1,1,2,3), levels = )
relevel(test, 3)
test<-factor(c(1,1,1,2,3), levels = )
test
test
test
test <- relevel(test, 3)
test
colnames(iowa)
help(lm)
colnames(iowa)
# make linear model of test scores by cities in iowa
# change cities to be factor with Iowa City first
model <- lm(Test ~ relevel(factor(City), "Iowa City"), iowa)
summary(model)
# change iowa city col into factor
class(iowa$City)
# change iowa city col into factor
iowa$City <- relevel(factor(iowa$City), "Iowa City")
class(iowa$City)
# change iowa city col into factor
iowa$City <- relevel(factor(iowa$City), "Iowa City")
# make linear model of test scores by cities in iowa
# change cities to be factor with Iowa City first
model <- lm(Test ~ City, iowa)
summary(model)
unique(iowa$City)
summary(model)
mean(arms$is.female)
# proportion of females
sum(arms$is.female)/nrow(arms)
mean(arms$is.female)
# plot
plot(Test ~ City, iowa)
# plot
ggplot(iowa) + geom_point(aes(City, Test))
model$coefficients
# get stats of model
summary(model)
help("geom_abline")
help(aes)
# plot
ggplot(iowa) + geom_point(aes(City, Test))
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_abline(slope = -6.297, intercept = 64.059)
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_abline(slope = -6.297, intercept = 64.059)
64.059-6.297
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_abline(slope = -6.297, intercept = 64.059, xend = 57.762) + geom_segment(aes())
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_abline(slope = -6.297, intercept = 64.059) + geom_segment(aes())
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(xend = 57.762))
model$coefficients
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 0, xend = 1, y = 64.058824, yend = 57.762))
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.762))
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.762)) + geom_text(aes(1.5,65), label = "hi")
model$coefficients
64.058824 - 6.296919
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,65), label = "Difference in Means of Iowa City and Cedar Rapids")
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,65), label = "Difference in Means of Iowa City and Cedar Rapids", size = 4)
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,65), label = "Difference in Means of Iowa City and Cedar Rapids", size = 1)
library(stringi)
help(wrapper)
help("wrapper")
# text wrapping funciton
wrapper <- function(x, ...) paste(stri_wrap(x, ...), collapse = "\n")
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,65), label = wrapper("Difference in Means of Iowa City and Cedar Rapids", width = 4), size = 1)
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,65), label = wrapper("Difference in Means of Iowa City and Cedar Rapids", width = 8), size = 4)
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,65), label = wrapper("Difference in Means of Iowa City and Cedar Rapids", width = 8), size = 2)
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,70), label = wrapper("Difference in Means of Iowa City and Cedar Rapids", width = 9), size = 3)
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,70), label = wrapper("Difference in Means of Iowa City and Cedar Rapids", width = 9), size = 2)
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,70), label = wrapper("Difference in Means of Iowa City and Cedar Rapids", width = 9), size = 2.5)
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,75), label = wrapper("Difference in Means of Iowa City and Cedar Rapids", width = 9), size = 2.5)
help(stringi)
# text wrapping function
wrapper <- function(x, ...) {paste(stri_wrap(x, ...), collapse = "\n")}
# plot
ggplot(iowa) + geom_point(aes(City, Test)) + geom_segment(aes(x = 1, xend = 2, y = 64.058824, yend = 57.7619)) + geom_text(aes(1.5,75), label = wrapper("Difference in Means of Iowa City and Cedar Rapids", width = 9), size = 2.5)
# get stats of model
summary(model)
glimpse(iowa)
iowa
# make linear model for test score by poverty score
colnames(iowa)
# make linear model for test score by poverty score
model <- lm(Test ~ Poverty, iowa)
# stats of model
summary(model)
ggplot(iowa) + geom_point(aes(Poverty, Test))
# stats of model
summary(model)
509.6539/702.5939
sqrt(0.7254)
plot(model)
# make linear model for test score by poverty score
model <- lm(Test ~ Poverty, iowa)
# stats of model
summary(model)
plot(model)
model$residuals
model$effects
model$qr
plot(model)
plot(model)
4/nrow(iowa)
plot(model)
help(hatvalues)
hatvalues(model)
nrow(iowa)
# calculate hatvalues for every observation
hval <- hatvalues(model)
# get which hat value is greater than 0.045 (based on graph)
which(hval > 0.045)
hval[27]
# get which hat value is greater than 0.045 (based on graph)
max(hval)
# get max hval index
which(hval == max(hval))
plot(model)[4]
plot(model)[3]
4/nrow(iowa)
help(rstandard)
rstandard(model)
rstandard(model)[47]
which(abs(rstan) > 2)
# get standard residuals
rstan <- rstandard(model)
which(abs(rstan) > 2)
(4/nrow(iowa))
# get hvals greater than 4/n
which(hval > (4/nrow(iowa)))
# get rstan greater than 2 std away
which(abs(rstan) > 2)
# get rstan greater than 2 std away
which(abs(rstan) > 2)
# get hvals greater than 4/n
which(hval > (4/nrow(iowa)))
# since hval list is bigger than rstan,
# get rstan's in hval
which(rstan %in% hval)
# since hval list is bigger than rstan,
# get rstan's in hval
rstan %in% hval
hval %in% rstan
# since hval list is bigger than rstan,
# get rstan's in hval
any(rstan %in% hval)
any(hval %in% rstan)
(4/nrow(iowa))
# since hval list is bigger than rstan,
# get rstan's in hval
any(rstan %in% hval)
any(hval %in% rstan)
anova(model)
# stats of model
summary(model)
# make linear model for test score by poverty score
model <- lm(Test ~ Poverty, iowa)
# stats of model
summary(model)
