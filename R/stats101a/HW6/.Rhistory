house_sent <- senti_updated %>% filter(Category.x == "Housing and Homelessness") %>% select(sentiment, Category.x)
fam_sent <- senti_updated %>% filter(Category.x == "Family and Children") %>% select(sentiment, Category.x)
other_sent <- senti_updated %>% filter(Category.x == "Other") %>% select(sentiment, Category.x)
consumer_sent <- senti_updated %>% filter(Category.x == "Consumer Financial Questions") %>% select(sentiment, Category.x)
work_sent <- senti_updated %>% filter(Category.x == "Work, Employment and Unemployment") %>% select(sentiment, Category.x)
individual_sent <- senti_updated %>% filter(Category.x == "Individual Rights") %>% select(sentiment, Category.x)
library(tidyverse)
house_sent <- senti_updated %>% filter(Category.x == "Housing and Homelessness") %>% select(sentiment, Category.x)
# load senti_updated
senti_updated <- read.csv(file = paste0(getwd(),"/LukVill/DataFest/senti_updated.csv"), header = TRUE)
unique(senti_updated$Category.x)
house_sent <- senti_updated %>% filter(Category.x == "Housing and Homelessness") %>% select(sentiment, Category.x)
fam_sent <- senti_updated %>% filter(Category.x == "Family and Children") %>% select(sentiment, Category.x)
other_sent <- senti_updated %>% filter(Category.x == "Other") %>% select(sentiment, Category.x)
consumer_sent <- senti_updated %>% filter(Category.x == "Consumer Financial Questions") %>% select(sentiment, Category.x)
work_sent <- senti_updated %>% filter(Category.x == "Work, Employment and Unemployment") %>% select(sentiment, Category.x)
individual_sent <- senti_updated %>% filter(Category.x == "Individual Rights") %>% select(sentiment, Category.x)
health_sent <- senti_updated %>% filter(Category.x == "Health and Disability") %>% select(sentiment, Category.x)
income_sent <- senti_updated %>% filter(Category.x == "Income Maintenance") %>% select(sentiment, Category.x)
edu_sent <- senti_updated %>% filter(Category.x == "Education") %>% select(sentiment, Category.x)
juv_sent <- senti_updated %>% filter(Category.x == "Juvenile") %>% select(sentiment, Category.x)
names(fam_sent)
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls, col)
{
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][col]), " SD -> ", sd(ls[[i]][col])))
}
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
mean_sd_all(sent_list, 1)
seq_along(ls)
ls
ls <- sent_list
seq_along(ls)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][col]), " SD -> ", sd(ls[[i]][col])))
}
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][1]), " SD -> ", sd(ls[[i]][1])))
}
ls[[i]][1]
mean(ls[[i]][1])
mean(ls[[1]][1])
ls[[i]][[1]]
mean(ls[[i]][[1]])
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
}
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
}
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
mean_sd_all(sent_list, 1)
mean_sd_all(sent_list)
res <- numeric(0)
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
matrix()
}
names(sent_list)
sent_list[1]
sent_list[1,][1]
sent_list[1,]
sent_list[1][1]
sent_list[[1]]
sent_list[[1]][1]
sent_list[[1]]
sent_list[[1]][1][1]
sent_list[[1]][[1]]
sent_list[[1]][[1]][1]
house_sent
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
as.data.frame(res)
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
res <- mean_sd_all(sent_list)
res
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
res <- as.data.frame(res)
names(res) <- c("Mean","SD")
res
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
res <- mean_sd_all(sent_list)
res
# add index col
cbind(seq_len(nrow(res)), res)
names(res)[1]
# add index col
res <- cbind(seq_len(nrow(res)), res)
names(res)[1]
names(res)[1] <- "Index"
res
res %>% arrange(desc(mean))
res %>% arrange(desc(Mean))
# sort high to low mean
res <- res %>% arrange(desc(Mean))
unique(sent_list$Category.x)
unique(senti_updated$Category.x)
names_categories <- unique(senti_updated$Category.x)
# make names of categories
names_categories <- unique(senti_updated$Category.x)
# sort high to low mean
res <- res %>% arrange(desc(Mean))
res
# sort the names
names_categories[res$Index]
res
res
names_categories
names_categories[-11]
# unsorted categories
names_categories[-11]
# sort the names
names_categories[res$Index]
# unsorted categories
names_categories[-11]
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE)
t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE)
}
# sort the names
names_categories[res$Index]
greaterTTest(juv_sent, fam_sent)
greaterTTest(house_sent,edu_sent)
greaterTTest(juv_sent, fam_sent)
juv_sent
fam_sent
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE)
t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE)
}
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
print(t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE))
print(t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE))
}
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# sort the names
names_categories[res$Index]
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
#
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
#
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
greaterTTest(consumer_sent$sentiment, health_sent$sentiment)
greaterTTest(health_sent$sentiment, work_sent$sentiment)
greaterTTest(work_sent$sentiment, house_sent$sentiment)
greaterTTest(house_sent$sentiment,edu_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
## special case needed to check
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
# HIGH P VALUE
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
# HIGH P VALUE
greaterTTest(consumer_sent$sentiment, health_sent$sentiment)
greaterTTest(health_sent$sentiment, work_sent$sentiment)
greaterTTest(work_sent$sentiment, house_sent$sentiment)
# HIGH P VALUE
greaterTTest(house_sent$sentiment,edu_sent$sentiment)
prop.test(x = c(39963, 130929), n = c(28487, 57040))
prop.test(x = c(39963, 130929), n = c(68450, 187969))
help(prop.test)
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), y = c(73724, 113574), alternative = "g")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: more female proportion clients in family households
# vs individual households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "t")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "l")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "g")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: more female proportion clients in family households
# vs individual households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: less female proportion clients in individual households
# vs family households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
rm()
ls()
rm(ls())
rm(list = ls())
setwd("C:/Users/lavil/source/repos/LukVill/code/R/stats101a/HW6")
read.csv(paste0(getwd(),"/AdRevenue.csv"), header = TRUE)
ad <- read.csv(paste0(getwd(),"/AdRevenue.csv"), header = TRUE)
glimpse(ad)
library(tidyverse)
glimpse(ad)
# linear model of ad rev based on circulation
model <- lm(AdRevenue~Circulation, ad)
# plot to check linearity
ggplot(ad) + geom_point(aes(Circulation, AdRevenue))
summary(model)
model <- lm(log(AdRevenue)~log(Circulation), ad)
summary(model)
model <- lm(sqrt(AdRevenue)~sqrt(Circulation), ad)
summary(model)
model <- lm(AdRevenue~sqrt(Circulation), ad)
summary(model)
model <- lm(sqrt(AdRevenue)~Circulation, ad)
summary(model)
model <- lm(AdRevenue~log(Circulation), ad)
summary(model)
model <- lm(log(AdRevenue)~Circulation, ad)
summary(model)
model <- lm(AdRevenue~sqrt(Circulation), ad)
summary(model)
summary(model)
# make new adrevenue based on transformation
newAd <- transform(ad, AdRevenue = AdRevenue, Circulation = sqrt(Circulation))
glimpse(newAd)
# make new adrevenue based on transformation
newAd <- transform(ad, Circulation = sqrt(Circulation))
glimpse(newAd)
ggplot(newAd) + geom_point(aes(Circulation, AdRevenues))
# make new adrevenue based on transformation
newAd <- transform(ad, Circulation = sqrt(Circulation))
glimpse(newAd)
ggplot(newAd) + geom_point(aes(Circulation, AdRevenues))
ggplot(newAd) + geom_point(aes(Circulation, AdRevenue))
# make new adrevenue based on transformation
newAd <- transform(ad, SqrtCirculation = sqrt(Circulation))
glimpse(newAd)
ggplot(newAd) + geom_point(aes(Circulation, AdRevenue))
glimpse(newAd)
# make new adrevenue based on transformation
newAd <- transform(ad, SqrtCirculation = sqrt(Circulation))
glimpse(newAd)
ggplot(newAd) + geom_point(aes(SqrtCirculation, AdRevenue))
ggplot(newAd) + geom_point(aes(Circulation, AdRevenue))
ggplot(newAd) + geom_point(aes(SqrtCirculation, AdRevenue))
# try new model
model <- lm(AdRevenue~sqrt(Circulation), ad)
# i.
confint(model, list(0.5), interval = "p", level = 0.95)
# i.
confint(model, list(SqrtCirculation = 0.5), interval = "p", level = 0.95)
# i.
predict(model, list(0.5), interval = "p", level = 0.95)
# i.
predict(model, list(SqrtCirculation = 0.5), interval = "p", level = 0.95)
# try new model
sqrtmodel <- lm(AdRevenue~sqrt(Circulation), ad)
# check stats
summary(sqrtmodel)
# make new adrevenue based on transformation
newAd <- transform(ad, SqrtCirculation = sqrt(Circulation))
glimpse(newAd)
# plot
ggplot(newAd) + geom_point(aes(SqrtCirculation, AdRevenue))
help(confint)
confint(model)
confint(model, level = 0.9)
confint(model, level = 0.95)
confint(model, level = 0.5)
confint(model, level = 0.95)
# i.
predict(model, list(SqrtCirculation = sqrt(0.5)), interval = "p", level = 0.95)
# i.
predict(sqrtmodel, list(SqrtCirculation = sqrt(0.5)), interval = "p", level = 0.95)
sqrtmodel
# i.
predict(sqrtmodel, list(Circulation = sqrt(0.5)), interval = "p", level = 0.95)
# i.
predict(sqrtmodel, list(Circulation = 0.5), interval = "p", level = 0.95)
sqrtmodel <- lm(AdRevenue~SqrtCirculation, newAd)
# new model
sqrtmodel <- lm(AdRevenue~SqrtCirculation, newAd)
# plot
ggplot(newAd) + geom_point(aes(SqrtCirculation, AdRevenue))
# i.
predict(sqrtmodel, list(SqrtCirculation = sqrt(0.5)), interval = "p", level = 0.95)
# ii.
predict(sqrtmodel, list(Circulation = sqrt))
# ii.
predict(sqrtmodel, list(SqrtCirculation = sqrt(20)), interval = "p", level = 0.95)
# linear model of ad rev based on circulation
m1 <- lm(AdRevenue~Circulation, ad)
# log models
m2 <- lm(log(AdRevenue)~Circulation, ad)
m3 <- lm(AdRevenue~log(Circulation), ad)
m4 <- lm(log(AdRevenue)~log(Circulation), ad)
m5 <- lm(sqrt(AdRevenue)~Circulation, ad)
m6 <- lm(AdRevenue~sqrt(Circulation), ad)
m7 <- lm(sqrt(AdRevenue)~sqrt(Circulation), ad)
# anova check each model
anova(m1,m2)
anova(m1,m3)
(m1,m2)
# anova check each model
anova(m1,m2)
# anova check each model
anova(m1,m4)
anova(m1,m3)
# anova check each model
anova(m2,m4)
anova(m1,m5)
# no function
anova(m1,m3)
anova(m3,m6)
anova(m1,m6)
# no function
anova(m1,m3)
anova(m3,m6)
anova(m1,m6)
library(tidyverse)
ad <- read.csv(paste0(getwd(),"/AdRevenue.csv"), header = TRUE)
glimpse(ad)
## A
### a.
```{r}
# plot to check linearity
ggplot(ad) + geom_point(aes(Circulation, AdRevenue))
# linear model of ad rev based on circulation
m1 <- lm(AdRevenue~Circulation, ad)
# log models
m2 <- lm(log(AdRevenue)~Circulation, ad)
m3 <- lm(AdRevenue~log(Circulation), ad)
m4 <- lm(log(AdRevenue)~log(Circulation), ad)
m5 <- lm(sqrt(AdRevenue)~Circulation, ad)
m6 <- lm(AdRevenue~sqrt(Circulation), ad)
m7 <- lm(sqrt(AdRevenue)~sqrt(Circulation), ad)
# no function
anova(m1,m3)
anova(m3,m6)
anova(m1,m6)
# no function
plot(m1)
plot(m1)
plot(m2)
plot(m3)
plot(m4)
plot(m5)
plot(m6)
plot(m7)
plot(m4)
plot(m4)
# i.
predict(m4, list(Circulation = sqrt(0.5)), interval = "p", level = 0.95)
# ii.
predict(m4, list(Circulation = sqrt(20)), interval = "p", level = 0.95)
plot(m4)
# i.
predict(m4, list(Circulation = sqrt(0.5)), interval = "p", level = 0.95)
# ii.
predict(m4, list(Circulation = sqrt(20)), interval = "p", level = 0.95)
# i.
predict(m4, list(Circulation = log(0.5)), interval = "p", level = 0.95)
# i.
predict(m4, list(Circulation = log(0.5)), interval = "p", level = 0.95)
m4
attributes(m4)
coef(m4)
# i.
predict(m4, list(Circulation = 0.5), interval = "p", level = 0.95)
# ii.
predict(m4, list(Circulation = 20), interval = "p", level = 0.95)
# i.
predict(m4, list(Circulation = 0.5), interval = "p", level = 0.95)
# ii.
predict(m4, list(Circulation = 20), interval = "p", level = 0.95)
plot(m4)
plot(m4)
nrow(ad)
4/nrow(ad)
glimpse(ad)
# 2nd order
secondOrderModel <- lm(AdRevenue~Circulation + I(Circulation^2), ad)
# 3rd order
thirdOrderModel <- lm(AdRevenu~Circulation + I(Circulation^2) + I(Circulation^3), ad)
# 3rd order
thirdOrderModel <- lm(AdRevenue~Circulation + I(Circulation^2) + I(Circulation^3), ad)
# i.
# 2nd order
predict(secondOrderModel, list(Circulation = 0.5), interval = "p", level = 0.95)
# 3rd order
predict(thirdOrderModel, list(Circulation = 0.5), interval = "p", level = 0.95)
# ii.
predict(secondOrderModel, list(Circulation = 20), interval = "p", level = 0.95)
predict(thirdOrderModel, list(Circulation = 20), interval = "p", level = 0.95)
plot(secondOrderModel)
plot(thirdOrderModel)
plot(secondOrderModel)
plot(thirdOrderModel)
plot(secondOrderModel)
plot(secondOrderModel)
anova(m4,secondOrderModel)
plot(secondOrderModel)
plot(m4)
plot(secondOrderModel)
# i.
# 2nd order
predict(secondOrderModel, list(Circulation = 0.5), interval = "p", level = 0.95)
# ii.
predict(secondOrderModel, list(Circulation = 20), interval = "p", level = 0.95)
# i.
predict(m4, list(Circulation = 0.5), interval = "p", level = 0.95)
# ii.
predict(m4, list(Circulation = 20), interval = "p", level = 0.95)
# ii.
predict(m4, list(Circulation = 20), interval = "p", level = 0.95)
