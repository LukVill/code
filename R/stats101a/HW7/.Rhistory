rm(transactionData)
glimpse(test)
glimpse(testSentimental)
testSentimental <- sentimental[1:100,]
glimpse(testSentimental)
glimpse(testSentimental)
source("C:/Users/lavil/source/repos/LukVill/DataFest/clients_work.R", echo=TRUE)
# for Juvenile
# sort out juvenile and education questions
questions %>% filter(Category == "Juvenile" | Category == "Education")
library(tidyverse)
# for Juvenile
# sort out juvenile and education questions
questions %>% filter(Category == "Juvenile" | Category == "Education")
# load questions
questions <- read.csv(file = paste0(getwd(),"/LukVill/DataFest/data/questions.csv"), header = TRUE)
# for Juvenile
# sort out juvenile and education questions
questions %>% filter(Category == "Juvenile" | Category == "Education")
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls, col)
{
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][col]), " SD -> ", sd(ls[[i]][col])))
}
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
mean_sd_all(sent_list, 1)
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
house_sent <- senti_updated %>% filter(Category.x == "Housing and Homelessness") %>% select(sentiment, Category.x)
fam_sent <- senti_updated %>% filter(Category.x == "Family and Children") %>% select(sentiment, Category.x)
other_sent <- senti_updated %>% filter(Category.x == "Other") %>% select(sentiment, Category.x)
consumer_sent <- senti_updated %>% filter(Category.x == "Consumer Financial Questions") %>% select(sentiment, Category.x)
work_sent <- senti_updated %>% filter(Category.x == "Work, Employment and Unemployment") %>% select(sentiment, Category.x)
individual_sent <- senti_updated %>% filter(Category.x == "Individual Rights") %>% select(sentiment, Category.x)
library(tidyverse)
house_sent <- senti_updated %>% filter(Category.x == "Housing and Homelessness") %>% select(sentiment, Category.x)
# load senti_updated
senti_updated <- read.csv(file = paste0(getwd(),"/LukVill/DataFest/senti_updated.csv"), header = TRUE)
unique(senti_updated$Category.x)
house_sent <- senti_updated %>% filter(Category.x == "Housing and Homelessness") %>% select(sentiment, Category.x)
fam_sent <- senti_updated %>% filter(Category.x == "Family and Children") %>% select(sentiment, Category.x)
other_sent <- senti_updated %>% filter(Category.x == "Other") %>% select(sentiment, Category.x)
consumer_sent <- senti_updated %>% filter(Category.x == "Consumer Financial Questions") %>% select(sentiment, Category.x)
work_sent <- senti_updated %>% filter(Category.x == "Work, Employment and Unemployment") %>% select(sentiment, Category.x)
individual_sent <- senti_updated %>% filter(Category.x == "Individual Rights") %>% select(sentiment, Category.x)
health_sent <- senti_updated %>% filter(Category.x == "Health and Disability") %>% select(sentiment, Category.x)
income_sent <- senti_updated %>% filter(Category.x == "Income Maintenance") %>% select(sentiment, Category.x)
edu_sent <- senti_updated %>% filter(Category.x == "Education") %>% select(sentiment, Category.x)
juv_sent <- senti_updated %>% filter(Category.x == "Juvenile") %>% select(sentiment, Category.x)
names(fam_sent)
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls, col)
{
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][col]), " SD -> ", sd(ls[[i]][col])))
}
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
mean_sd_all(sent_list, 1)
seq_along(ls)
ls
ls <- sent_list
seq_along(ls)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][col]), " SD -> ", sd(ls[[i]][col])))
}
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][1]), " SD -> ", sd(ls[[i]][1])))
}
ls[[i]][1]
mean(ls[[i]][1])
mean(ls[[1]][1])
ls[[i]][[1]]
mean(ls[[i]][[1]])
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
}
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
}
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
mean_sd_all(sent_list, 1)
mean_sd_all(sent_list)
res <- numeric(0)
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
matrix()
}
names(sent_list)
sent_list[1]
sent_list[1,][1]
sent_list[1,]
sent_list[1][1]
sent_list[[1]]
sent_list[[1]][1]
sent_list[[1]]
sent_list[[1]][1][1]
sent_list[[1]][[1]]
sent_list[[1]][[1]][1]
house_sent
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
as.data.frame(res)
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
res <- mean_sd_all(sent_list)
res
# function to list means and sd of all categories
# INPUT: list, col = index of col to calculate
mean_sd_all <- function(ls)
{
res <- numeric(0)
# for all elems in list
for(i in seq_along(ls))
{
# print mean and sd
print(paste0("Mean -> ", mean(ls[[i]][[1]]), " SD -> ", sd(ls[[i]][[1]])))
res <- rbind(res,c(mean(ls[[i]][[1]]),sd(ls[[i]][[1]])))
}
# return matrix of mean and sd cols
res <- as.data.frame(res)
names(res) <- c("Mean","SD")
res
}
# list of categories' sentiments
sent_list <- list(house_sent, fam_sent, other_sent, consumer_sent, work_sent, individual_sent, health_sent, income_sent, edu_sent, juv_sent)
res <- mean_sd_all(sent_list)
res
# add index col
cbind(seq_len(nrow(res)), res)
names(res)[1]
# add index col
res <- cbind(seq_len(nrow(res)), res)
names(res)[1]
names(res)[1] <- "Index"
res
res %>% arrange(desc(mean))
res %>% arrange(desc(Mean))
# sort high to low mean
res <- res %>% arrange(desc(Mean))
unique(sent_list$Category.x)
unique(senti_updated$Category.x)
names_categories <- unique(senti_updated$Category.x)
# make names of categories
names_categories <- unique(senti_updated$Category.x)
# sort high to low mean
res <- res %>% arrange(desc(Mean))
res
# sort the names
names_categories[res$Index]
res
res
names_categories
names_categories[-11]
# unsorted categories
names_categories[-11]
# sort the names
names_categories[res$Index]
# unsorted categories
names_categories[-11]
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE)
t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE)
}
# sort the names
names_categories[res$Index]
greaterTTest(juv_sent, fam_sent)
greaterTTest(house_sent,edu_sent)
greaterTTest(juv_sent, fam_sent)
juv_sent
fam_sent
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE)
t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE)
}
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# t test two vectors, alt hyp: v1 > v2
greaterTTest <- function(v1, v2)
{
print(t.test(x = v1, y = v2, alternative = "g", var.equal = TRUE))
print(t.test(x = v1, y = v2, alternative = "g", var.equal = FALSE))
}
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
# sort the names
names_categories[res$Index]
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
#
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
#
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
greaterTTest(consumer_sent$sentiment, health_sent$sentiment)
greaterTTest(health_sent$sentiment, work_sent$sentiment)
greaterTTest(work_sent$sentiment, house_sent$sentiment)
greaterTTest(house_sent$sentiment,edu_sent$sentiment)
greaterTTest(juv_sent$sentiment, fam_sent$sentiment)
## special case needed to check
greaterTTest(juv_sent$sentiment, other_sent$sentiment)
greaterTTest(fam_sent$sentiment,other_sent$sentiment)
greaterTTest(other_sent$sentiment,individual_sent$sentiment)
# HIGH P VALUE
greaterTTest(individual_sent$sentiment,income_sent$sentiment)
greaterTTest(income_sent$sentiment, consumer_sent$sentiment)
# HIGH P VALUE
greaterTTest(consumer_sent$sentiment, health_sent$sentiment)
greaterTTest(health_sent$sentiment, work_sent$sentiment)
greaterTTest(work_sent$sentiment, house_sent$sentiment)
# HIGH P VALUE
greaterTTest(house_sent$sentiment,edu_sent$sentiment)
prop.test(x = c(39963, 130929), n = c(28487, 57040))
prop.test(x = c(39963, 130929), n = c(68450, 187969))
help(prop.test)
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), y = c(73724, 113574), alternative = "g")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: more female proportion clients in family households
# vs individual households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "t")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "l")
# p checking: female prop in clients that asked questions is
# equal to female prop total
# female prop asked ques: 101703, clients asked: 149096, female prop total: 185433, total: 280227
prop.test(x = c(101703, 185433), n = c(149096, 280227), alternative = "g")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
# p checking: more female proportion clients in family households
# vs individual households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: less female proportion clients in individual households
# vs family households
prop.test(x = c(39963, 130929), n = c(68450, 187969), alternative = "l")
# p checking: more female prop clients in divorced/sep than married/single
# female divorced/sep: 55438, total divorced/sep: 73724
# female married/single: 75783, total married/single: 113574
prop.test(x = c(55438,75783), n = c(73724, 113574), alternative = "g")
rm()
ls()
rm(ls())
rm(list = ls())
help("pairs")
setwd("C:/Users/lavil/source/repos/LukVill/code/R")
mussels <- read.delim(paste0("C:/Users/lavil/Downloads/mussels.txt"))
import tidyverse
library(tidyverse)
glimpse(mussels)
mussles
mussels
m <- lm(thickness ~ ., data = mussels)
summary(m)
m <- lm(thickness ~ food + temp + seastar.density + waves + human.use, data = mussels)
summary(m)
m <- lm(thickness ~ food + temp + seastar.density + human.use + waves, data = mussels)
summary(m)
m1 <- lm(thickness ~ food + temp + seastar.density + waves + human.use, data = mussels)
m2 <- lm(thickness ~ food + temp + seastar.density + human.use + waves, data = mussels)
anova(m1)
anova(m2)
m1 <- lm(thickness ~ food + temp + seastar.density + waves + human.use, data = mussels)
m2 <- lm(thickness ~ food + temp + seastar.density + human.use + waves, data = mussels)
anova(m1)
anova(m2)
setwd("C:/Users/lavil/source/repos/LukVill/code/R/stats101a/HW7")
clr()
clr
cls
df <- read.delim(paste0(getwd(),"/waistweightheight.txt"))
df
library(tidyverse)
glimpse(df)
m1 <- lm(Weight ~ Waist + Height, data = df)
summary(m1)
anova(m1)
m1 <- lm(Weight ~ Height + Waist, data = df)
m1 <- lm(Weight ~ Height + Waist, data = df)
### i.
```{r}
anova(m1)
m1 <- lm(Weight ~ Waist + Height, data = df)
anova(m1)
summary(m1)
anova(m1)
nrow(df)
anova(m1)
anova(m1)
summary(m1)
anova(m1)
anova(m1)[-3,1]
anova(m1)[-3,2]
anova(m1)
anova(m1)[-3,2]
anova(m1)[-3,2]
sum(anova(m1)[-3,2])
# SSReg
sum(anova(m1)[-3,2])
var(df$Weight)
var(df$Weight) * (nrow(df)-1)
# RSS
anova(m1)[3,1]
# RSS
anova(m1)[3,2]
var(df$Weight) * (nrow(df)-1)
sum(anova(m1)[-3,2]) + anova(m1)[3,2]
var(df$Weight) * (nrow(df)-1)
sum(anova(m1)[-3,2]) + anova(m1)[3,2]
# SSReg
ssreg <- sum(anova(m1)[-3,2])
ssreg
# RSS
rss <- anova(m1)[3,2]
rss
# SYY
ssreg + rss
ssreg
rss
# SYY
ssreg + rss
summary(m1)
summary(m1)
help(transform)
rnorm(dim(df)[1],0,5)
set.seed(23)
new.df <- transform(df, worthless = rnorm(dim(df)[1],0,5))
glimpse(new.df)
set.seed(23)
new.df <- transform(df, worthless = rnorm(dim(df)[1],0,5))
glimpse(new.df)
anova(new.df)
m2 <- lm(Weight ~ Waist + Height + worthless, new.df)
anova(m2)
ssreg
rss
anova(m1)
anova(m2)
anova(m2)[-4,2]
anova(m2)
ssreg2 <- sum(anova(m2)[-4,2])
ssreg2
rss2 <- anova(m2)[4,2]
rss2
ssreg2 + rss2
# SSReg
ssreg <- sum(anova(m1)[-3,2])
ssreg
# RSS
rss <- anova(m1)[3,2]
rss
# SYY
ssreg + rss
ssreg2 <- sum(anova(m2)[-4,2])
ssreg2
rss2 <- anova(m2)[4,2]
rss2
ssreg2 + rss2
ssreg2
rss2
ssreg2 + rss2
summary(m2)
summary(m1)
summary(m2)
m3 <- lm(Weight ~ worthless + Waist + Height, new.df)
anova(m3)
anova(m3)[-4,2]
# ssreg
ssreg3 <- sum(anova(m3)[-4,2])
ssreg3
# rss
rss3 <- anova(m3)[4,2]
rss3
# syy
ssreg3 + rss3
summary(m3)
summary(m2)
summary(m3)
anova(m1)
anova(m2)
cars <- read.csv(paste0(getwd(),"/cars04.csv"))
glimpse(cars)
# model
cars.m <- lm(SuggestedRetailPrice ~ . -Vehicle.Name -Hybrid)
# model
cars.m <- lm(SuggestedRetailPrice ~ . -Vehicle.Name -Hybrid, cars)
testm <- lm(SuggestedRetailPrice ~ . -Hybrid, cars)
plot(testm)
plot(cars.m)
plot(testm)
plot(SuggestedRetailPrice ~ Vehicle.Name, cars)
lm(SuggestedRetailPrice ~ Vehicle.Name, cars)
plot(lm(SuggestedRetailPrice ~ Vehicle.Name, cars))
lm(SuggestedRetailPrice ~ Vehicle.Name, cars)
testm <- lm(SuggestedRetailPrice ~ . -Hybrid, cars)
testm
# model
cars.m <- lm(SuggestedRetailPrice ~ . -Vehicle.Name -Hybrid, cars)
glimpse(cars)
cars.m
summary(cars.m)
anova(cars.m)
anova(cars.m)[3,]
anova(cars.m)[3,4]
sqrt(anova(cars.m)[3,4])
anova(cars.m)
sqrt(anova(cars.m)[3,4])
anova(cars.m)[3,4]
anova(cars.m)
summary(cars.m)
cars.m
# model without fuel consumption
cars.mNoFuel <- lm(SuggestedRetailPrice ~ . -Vehicle.Name -Hybrid -CityMPG -HighwayMPG, cars)
cars.mNoFuel
# anova test
anova(cars.mNoFuel, cars.m)
anova(cars.m, cars.mNoFuel)
# anova test
anova(cars.mNoFuel, cars.m)
# anova test
anova(cars.mNoFuel, cars.m, testm)
# anova test
anova(cars.mNoFuel, cars.m)
sqrt(anova(cars.m)[3,4])
# anova test
anova(cars.m, cars.m)
# anova test
anova(cars.mNoFuel, cars.m)
