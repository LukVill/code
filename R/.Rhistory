get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & is.null(x)]
for(elem in x)
{
count <- count + 1
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
x <- matrix(1, nrow = 3, ncol = 5)
x
!is.na(x) & is.null(x)
!is.na(x)
is.null(x)
vapply(x, is.null, logical(1))
!is.na(x) & !(vapply(x, is.null, logical(1)))
x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
for(elem in x)
{
count <- count + 1
}
# output
count
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
for(elem in x)
{
count <- count + 1
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
ex2
get_numel(ex2)
length(c(NULL,NULL))
length(c(NULL,NA))
length(c(NULL,NA), na.rm = TRUE)
length(c(NULL,NA), na.rm = TRUE)
length(c(NULL,NA), na.rm = TRUE)
c(NULL,NA)
length(c(NULL,NA, 1), na.rm = TRUE)
length(c(NULL,NA, 1), na.rm = TRUE)
help(length)
length(c(NULL,NA, 1))
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
for(elem in x)
{
count <- count + length(x)
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
length(ex1)
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
for(elem in x)
{
count <- count + length(x)
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
if(is.list(x))
{
for(elem in x)
{
count <- count + length(x)
}
}
else
{
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
length(3)
length(ex1)
length(3)
length(logical(4))
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
if(is.list(x))
{
for(elem in x)
{
count <- count + length(x)
}
}
else
{
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
is.list(ex2)
length(ex1) + length(NULL)
length(ex1) + length(NULL) + length(list(NULL))
length(ex1) + length(NULL) + length(list(NULL)) + length(logical(4))
seq_along(ex2)
length(ex[5])
length(ex2[5])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[4])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[1])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[1]])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[2]])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[1]])
ex2[[1]]
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[1]])
ex2[1]
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[1])
ex2[2]
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[2])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[2])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[3])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[4])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[5])
ex2[5]
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[5]])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[4]])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[6]])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[5]])
ex2[[5]]
get_numel(ex1)
length(x[max(seq_along(x))])
seq_along(x)
max(seq_along(x))
length(x[[max(seq_along(x))]])
x[[max(seq_along(x))]]
[max(seq_along(x))
max(seq_along(x))
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[5]])
length(ex2)
length(x)
x
x <- list(ex1, NULL, list(NULL), 3, logical(4))
x
length(ex2)
length(x[[length(x)]])
length(x)
(x[[length(x)]]
x[[length(x)]]
x[[length(x)]]
length(x[[length(x)]])
length(ex1) + length(NULL) + length(list(NULL)) +
length(ex2[[5]])
x == ex2
x
ex2
get_numel <- function(x)
{
# count val
count <- 0
if(is.list(x))
{
length(x[[length(x)]])
}
else
{
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
get_numel <- function(x)
{
# count val
count <- 0
if(is.list(x))
{
count <- length(x[[length(x)]])
}
else
{
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
for(
x
}
for(
x
}
x
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
if(is.list(x))
{
for(elem in x)
{
print(elem)
}
}
else
{
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
if(is.list(x))
{
for(elem in x)
{
print(length(elem))
}
}
else
{
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
length(list(NULL))
list(NULL)
length(list(NULL,5))
x<-list(NULL,5)
x<-list(NULL,5)
x[1]
x[2]
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
if(is.list(x))
{
for(elem in x)
{
count <- count + length(elem[!is.na(x) & !(vapply(elem, is.null, logical(1)))])
}
}
else
{
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
if(is.list(x))
{
for(elem in x)
{
if(is.list(elem))
{
elem <- elem[!is.na(elem) & !(vapply(elem, is.null, logical(1)))]
if(length(elem) > 0)
{
count <- count + length(elem)
}
}
else
{
for(e in elem)
{
count <- count + 1
}
}
}
}
else
{
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
factor(1:10)[1]
factor(1:10)[2]
factor(1:10)[1][1]
factor(1:10)[[1]]
attributes(factor(1:10))
attributes(factor(c(1:10,1)))
c(1:10,1)
factor(c(1:10,1))
attributes(factor(c(1:10,1)))
factor(c(1:10,1))[11]
factor(c(1:10,1))[[1]]
factor(c(1:10,1))
x[10]
x[1]
x[2]
get_numel <- function(x)
{
# count val
count <- 0
# subset all null and na and nan out
x <- x[!is.na(x) & !(vapply(x, is.null, logical(1)))]
if(is.list(x))
{
for(elem in x)
{
if(is.list(elem))
{
elem <- elem[!is.na(elem) & !(vapply(elem, is.null, logical(1)))]
if(length(elem) > 0)
{
count <- count + length(elem)
}
}
else
{
for(e in elem)
{
count <- count + 1
}
}
}
}
else
{
for(elem in x)
{
count <- count + 1
}
}
# output
count
}
ex1 <- matrix(1, nrow = 3, ncol = 5)
ex2 <- list(ex1, NULL, list(NULL), 3, logical(4))
get_numel(ex1)
get_numel(ex1[c(NA, TRUE)])
get_numel(ex2)
x<-factor(c(1:10,1))
x[3]
x[3]
x[2]
x<-factor(c(1:10,1))
x[2]
x[1]
x[10]
x[11]
x[12]
x <- x[1:4]
x
paste("h", c("a", "e", "o"), sep = "", collapse = ", and ")
paste("h", c("a", "e", "o"), sep = "", collapse = ", and")
paste("h", c("a", "e", "o"), collapse = ", and ")
paste("h", c("a", "e", "o"), sep = "")
paste("h", c("a", "e", "o"), sep = " ")
paste("h", c("a", "e", "o"), sep = "", collapse = "")
paste("h", c("a", "e", "o"), sep = "", collapse = " ")
load("C:/Users/Luke Villanueva/Downloads/births.csv")
setwd("C:/Users/Luke Villanueva/source/repos/LukVill/code")
setwd("C:/Users/Luke Villanueva/source/repos/LukVill/code/R")
load("births.csv")
read.csv(births)
read.csv(file = "births.csv")
nchar(letters)
