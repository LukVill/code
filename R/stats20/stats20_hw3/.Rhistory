setwd("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats20_hw3")
load("dna.RData")
locate_motif <- function(strand, motif)
{
# parse through elems, if first elem found, then parse through section for length of motif (i.e. substring for length of motif and check if it's the motif)
# res var
res <- integer(0)
# length of motif
len_motif <- length(motif)
# bool for found
is_found <- FALSE
for(i in seq_along(strand))
{
# found first elem, check if there's room for rest of strand for motif
if(strand[i] == motif[1] & (i+len_motif-1) <= length(strand))
{
# initially make found bool true
is_found <- TRUE
# make substring of i to i+len_motif-1
test_substr <- strand[i:(i+len_motif-1)]
# check if each elem in substring is the motif
for(j in seq_along(test_substr))
{
# if any is wrong, set is_found to false
if(test_substr[j] != motif[j])
{
is_found <- FALSE
}
}
# if found bool is true, set res to i, break loop
if(is_found == TRUE)
{
res <- i
break
}
# else, move on
}
}
message("Completed locate_motif()")
# output res
res
}
# find gattaca
locate_motif(dna1, c("G","A","T","T","A","C","A"))
# extract from dna1 and dna2
extract_longest_substring(dna1,dna2)
seq1 <- c("A","C","A","G","T")
seq2 <- c("T","A","G","T","A")
# make extract_longest_substring()
extract_longest_substring <- function(strand1, strand2)
{
# result initially empty char vector
res <- character(0)
res_candidate <- character(0)
# parse through every character of first strand and decrease length for each failed substring test in strand2
# if substring found, set res to found substring and break for loop
# if length < 2, parse to next starting character
for(i in seq_along(strand1))
{
# make substr of i to end of strand1
test_substr <- strand1[i:length(strand1)]
# try to find test_substr in strand2
while(length(test_substr) >= 2)
{
indx_test_substr <- locate_motif(strand2, test_substr)
# if int(0) returns, remove last elem of test_substr and try again
if(length(indx_test_substr) == 0)
{
test_substr <- test_substr[1:(length(test_substr)-1)]
}
# else, substr is found in strand2, set res to found substr and break
else
{
res_candidate <- strand1[i:(i + length(test_substr) - 1)]
break
}
}
# if res_candidate is not char(0),check if length is longer than previous res, if so, set res to res_candidate
if(length(res_candidate) != 0 & length(res_candidate) > length(res))
{
res <- res_candidate
}
# if res_candidate is still character(0), move to next i
}
# output res
res
}
# test
extract_longest_substring(seq1,seq2)
# extract from dna1 and dna2
extract_longest_substring(dna1,dna2)
