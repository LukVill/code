food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% group_by(recipe) %>% summarise(sum_wheat_prod_cal = sum(weight..oz.))
food %>% filter(type == "Meat") %>% rename(food_item = item) %>% outer_join(stock, by = "food_item") %>% filter(shop %in% c("MyMart","Coco Mart")) %>% select(-3)
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% group_by(recipe) %>% summarise(sum_wheat_prod_cal = sum(weight..oz.))
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
names$names
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
vec1 <- c(names$names,"Luke Adrian Villanueva")
vec1[str_detect(vec, "^([A-Z]\\w+)( [A-Z]\\w+ )*?( [A-Z]\\w+)$")]
vec1 <- c(names$names,"Luke Adrian Villanueva")
vec1[str_detect(vec, "^([A-Z]\\w+)( [A-Z]\\w+ )*?( [A-Z]\\w+)$")]
vec1[str_detect(vec1, "^([A-Z]\\w+)( [A-Z]\\w+ )*?( [A-Z]\\w+)$")]
vec1
vec1[str_detect(vec1, "^([A-Z]\\w+ )( [A-Z]\\w+ )*?([A-Z]\\w+)$")]
vec1[str_detect(vec1, "^([A-Z]\\w+ )([A-Z]\\w+ )*?([A-Z]\\w+)$")]
vec1[str_detect(vec1, "^([A-Z]\\w+ )([A-Z]\\w+ )*?([A-Z]\\w+)$")]
vec1 <- c(vec1,"Andrei Joshua Martirez Adrian Villanueva")
vec1 <- c(vec1,"Andrei Joshua Martirez Adrian Villanueva")
vec1
vec1[str_detect(vec1, "^([A-Z]\\w+ )([A-Z]\\w+ )*?([A-Z]\\w+)$")]
vec1[str_detect(vec1, "^([A-Z][a-z]+ )([A-Z][a-z]+ )*?([A-Z][a-z]+)$")]
pat_1_b(names$names)
pat_1_a(names$names)
cards
names
cards
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
cards
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
cards
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
cards$cards[str_detect(cards$cards, "5")]
cards$cards[str_detect(cards$cards, "^5")]
cards$cards[str_detect(cards$cards, "^5")]
cards$cards[str_detect(cards$cards, "^5(\\b*\\d+\\b*)")]
cards$cards[str_detect(cards$cards, "^5(\\d+)")]
cards$cards[str_detect(cards$cards, "^5\\d+")]
cards$cards[str_detect(cards$cards, "^5\\d+{15}")]
cards$cards[str_detect(cards$cards, "^5\\d{15}")]
cards$cards[str_detect(cards$cards, "^5\\d")]
cards$cards[str_detect(cards$cards, "^5\\d+")]
help("UseMethod")
cards$cards[str_detect(cards$cards, "^5(\\b*)")]
cards$cards[str_detect(cards$cards, "^5[\\b\\d]{15}")]
cards$cards[str_detect(cards$cards, "^5(\\b*?)")]
cards$cards[str_detect(cards$cards, "^5(\\s*?\\d\\s*?)")]
cards$cards[str_detect(cards$cards, "^5(\\s*?\\d\\s*?){15}")]
cards$cards
cards$cards[str_detect(cards$cards, "^5(\\s*?\\d\\s*?){15}")]
cards$cards[8]
nchar(cards$cards[8])
cards$cards[str_detect(cards$cards, "^5(\\s*?\\d\\s*?){15}$")]
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
res <- vec[str_detect(vec, "^5(\\s*?\\d\\s*?){15}$")]
vec <- cards$cards
res <- vec[str_detect(vec, "^5(\\s*?\\d\\s*?){15}$")]
# split filtered strings by string split
str_split(res, "\\D")
# split filtered strings by string split
split <- str_split(res, "\\D")
str_c(split)
# split filtered strings by string split
split <- unlist(str_split(res, "\\D"))
split
# split filtered strings by string split
split <- str_split(res, "\\D")
help(str_c)
split
help(str_c(res))
str_c(split)
res
# replace all whitespace with no char
res1 <- str_replace(res, "\s","")
# replace all whitespace with no char
res1 <- str_replace(res, "\\s","")
res1
res <- vec[str_detect(vec, "^5(\\s*?\\d\\s*?){15}$")]
# replace all whitespace with no char
res1 <- str_replace_all(res, "\\s","")
res1
res1
# print by split
str_replace_all(res,"(?<=\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=^\\d{4}$)"," ")
# print by split
str_replace_all(res,"(?<=\\S\\d{4}\\S)"," ")
# print by split
str_replace_all(res,"(?<=\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=\\s*?\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=\\s\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=\\b\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=\\s\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=\\b\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=\\b\\d{4})"," ")
ingredient %>% filter(str_detect(toupper(food_item),"TOMATO|BREAD"))
# print by split
str_replace_all(res,"(?<=\\b\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=\\b\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=\\b\\d{4})"," ")
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
# print by split
str_replace_all(res,"(?<=\\d{4})"," ")
# print by split
str_replace_all(res,"(?<=(\\d){4})"," ")
res
# print by split
str_replace_all(res1,"(?<=\\d{4})"," ")
# print by split
str_replace_all(res1,"(?<=\\b\\d{4})"," ")
# print by split
str_replace_all(res1,"(?<=\\b|\\s\\d{4})"," ")
# print by split
str_replace_all(res1,"(?<=\\s\\d{4})"," ")
food %>% filter(type == "Wheat product")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item")
recipe
recipe
ingredient
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% left_join(ingredient, by = "recipe")
food %>% filter(type == "Wheat product")
food %>% filter(type == "Wheat product") %>% rename(food_item = item)
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe")
food %>% filter(type == "Wheat product") %>% rename(food_item = item)
food
food %>% filter(type == "Wheat product")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe")
recipe
ingredient
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe, calories) %>% left_join(ingredient, by = "recipe")
ingredient
recipe
calories
food
food %>% filter(type == "Wheat product")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe, calories)
ingredient
food
food
food %>% filter(type == "Wheat product")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe)
ingredient
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe)
recipe
```{r}
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe)
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe")
food
ingredient
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% left_join(food, by = "food_item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% left_join(food, by = "food_item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe)
ingredient
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "food_item")
ingredient
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe)
ingredient
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe")
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe)
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe)
food
ingredient
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe")
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item)
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = "item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item)
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = c("recipe","item"))
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = c(,"item"))
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = c("item"))
food
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item)
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = "item")
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = "item")
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item)
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = "item")
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item)
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = "item")
food
food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item) %>% left_join(food, by = "item")
food
ingredient
ingredient %>% filter(food_item == "Tomato")
ingredient %>% filter(food_item == "Tomato ")
food
food %>% filter(item == "Tomato")
res <- food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item)
# change tomato
res$item
# change tomato
res$item[11] <- "Tomato"
res %>% left_join(food, by = "item")
res %>% left_join(food, by = "item") %>% group_by(recipe) %>% summarise(Total_Calories = sum(calories))
# print by split
str_replace_all(res1,"(?<=\\d{4})"," ")
res1
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})$","^\1 \2 \3$")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})$","^\1\\s\2\\s\3$")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})$","^\\1\\s\\2\\s\\3$")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})$","^\\1\\s\\2\\s\\3$")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})$"," ")
# print by split
str_replace_all(res1,"^(\\d{4})$"," ")
# print by split
str_replace_all(res1,"^(\\d{4})"," ")
# print by split
str_replace_all(res1,"^(\\d{4})\\d{4})"," ")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})"," ")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})"," ")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})(\\d{4})"," ")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})(\\d{4})$","")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})(\\d{4})$"," ")
# print by split
str_replace_all(res1,"^(\\d{4}){4}$","")
# print by split
str_replace_all(res1,"^(\\d{4}){4}$"," ")
# print by split
str_replace_all(res1,"^(\\d{4}){4}$","\1")
# print by split
str_replace_all(res1,"^(\\d{4}){4}$","\\1")
res1
# print by split
str_replace_all(res1,"^(\\d{4}){4}$","\\1\\2")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})(\\d{4})$","\\1")
res1
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})(\\d{4})$","\\1")
# print by split
str_replace_all(res1,"^(\\d{4})(\\d{4})(\\d{4})(\\d{4})$","\\1 \\2 \\3 \\4")
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
vec
res <- vec[str_detect(vec, "^4(\\s*?\\d\\s*?)")]
res
res <- vec[str_detect(vec, "^4(\\s*?\\d\\s*?){12}")]
res
vec[str_detect(vec, "^4")]
vec[str_detect(vec, "^4(\\s*?\\d\\s*?){12}")]
vec[str_detect(vec, "^4(\\s*?\\d\\s*?){12,15}")]
test <- c(vec,"4513546879548621")
test[str_detect(test, "^4(\\s*?\\d\\s*?){12,15}")]
test <- c(vec,"4513546879548621123")
test[str_detect(test, "^4(\\s*?\\d\\s*?){12,15}")]
test[str_detect(test, "^4(\\s*?\\d\\s*?){12,15}$")]
test[str_detect(test, "^4(\\s*?\\d\\s*?){12,15}$")]
vec[str_detect(vec, "^4(\\s*?\\d\\s*?){12,15}$")]
# replace all whitespace with no char
res1 <- str_replace_all(res, "\\s","")
res1
res <- vec[str_detect(vec, "^4(\\s*?\\d\\s*?){12,15}$")]
res
# replace all whitespace with no char
res1 <- str_replace_all(res, "\\s","")
res1
# print with correct whitespace
str_replace_all(res1, "^(\\d{4})(\\d{4})(\\d{4})(\\d+)$", "\\1 \\2 \\3 \\4")
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
res1
# print with correct whitespace
str_replace_all(res1, "^(\\d{4})(\\d{4})(\\d{4})(\\d+)$", "\\1 \\2 \\3 \\4")
vec <- passwords
vec
str_detect(vec, "(?=[\\d\\w]{8,})(?=\\d+)(?=\\w+)[\\d\\w]+")
vec <- passwords$passwords
vec[str_detect(vec, "(?=[\\d\\w]{8,})(?=\\d+)(?=\\w+)[\\d\\w]+")]
vec
vec[str_detect(vec, "^(?=[\\d\\w]{8,})(?=\\d+)(?=\\w+)[\\d\\w]+$")]
vec[str_detect(vec, "^(?=\\d+)(?=\\w+)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^[\\d\\w]{8,}$")]
vec[str_detect(vec, "^(?=\\d)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^(?=\\w)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^(?=\\w)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^(?=\\w)(?=\\d)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^[\\d\\w]{8,}$")]
nchar(vec[str_detect(vec, "^[\\d\\w]{8,}$")])
nchar(vec[str_detect(vec, "^[\\d\\w]$")])
vec[str_detect(vec, "^[\\d\\w]$")]
vec[str_detect(vec, "^[\\d\\w]+$")]
nchar(vec[str_detect(vec, "^[\\d\\w]+$")])
nchar(vec[str_detect(vec, "^[\\d\\w]{8}$")])
nchar(vec[str_detect(vec, "^[\\d\\w]{8,}$")])
vec[str_detect(vec, "^(?=\\d?)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^(?=[\\d]?)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^(?=\\d+)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^(?=\\d*)[\\d\\w]{8,}$")]
vec[str_detect(vec, "^(?=\\d?)[\\d\\w]{8,}$")]
pat_2_a(cards$cards)
pat_2_b(cards$cards)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
passwords
pat_3_a(passwords$passwords)
passwords
pat_3_a(passwords$passwords)
passwords
pat_3_a(passwords$passwords)
vec[str_detect(vec, "^(?=.*[A-Z].*)(?=.*[a-z].*)(?=.*\\d.*).{8,}$")]
vec[str_detect(vec, "^(?=.*[A-Z].*).*$")]
vec[str_detect(vec, "^(?=.*[A-Z].*)(?=.*[a-z].*)(?=.*\\d.*).{8,}$")]
# condition: check if exists 1 letter, 1 number, restrict to at least 8 matches
vec[str_detect(vec, "^(?=.*[a-zA-Z]+.*)(?=.*[0-9]+.*).{8,}$")]
vec[str_detect(vec, "^(?=.*[A-Z].*)(?=.*[a-z].*)(?=.*\\d.*).{8,}$")]
wordlists$Ranges
x <- wordlists$Ranges$x
y <- wordlists$Ranges$y
# contains only letters from a-f
print("x matches:")
print(x[str_detect(x,"[a-f]*")])
length(x[str_detect(x,"[a-f]*")])
length(x)
print(y[str_detect(y,"[a-f]*")])
print(y[str_detect(y,"[^f-z]*")])
print(y[str_detect(y,"(?!f-z).*")])
print(y[str_detect(y,"(?![f-z]).*")])
x
print(y[str_detect(y,"(?!.*[f-z].*).*")])
print(y[str_detect(y,"(?!.*[f-z].*).*")])
y[str_detect(y,"(?!.*[f-z].*).*")]
y[str_detect(y,"[^f-z]*")]
str_detect(y,"[^f-z]*")
y[str_detect(y,"[a-f]*")]
y[str_detect(y,"(?=.*[a-f].*)(?!.*[g-z].*).*")]
y[str_detect(y,"(?!.*[g-z]*.*).*")]
print(x[str_detect(x,"(?!.*[g-z]*.*).*")])
print(x[str_detect(x,"(?![g-z]*.*).*")])
print(x[str_detect(x,"(?![g-z]*).*")])
print(x[str_detect(x,"[a-f]*")])
print(y[str_detect(y,"[a-f]*")])
help("str_detect")
print(y[str_detect(y,"[^g-z]*")])
print(y[str_detect(y,"(?=[^g-z]*).*")])
print(y[str_detect(y,"(?!=.*[g-z].*).*")])
print(y[str_detect(y,"(?!.*[g-z].*).*")])
print(y[str_detect(y,"(?=.*[^g-z].*).*")])
print(y[str_detect(y,"(?!.*[g-z].*).*")])
print(y[str_detect(y,"^(?!.*[g-z].*).*$")])
print(x[str_detect(x,"^(?!.*[g-z].*).*$")])
length(x[str_detect(x,"^(?!.*[g-z].*).*$")])
length(x)
print(y[str_detect(y,"^(?!.*[g-z].*).*$")])
x <- wordlists$Backrefs
x <- wordlists$Backrefs$x
y <- wordlists$Backrefs$y
x
# n length phrase is repeated twice in string
x[str_detect(x, "(?=.*(\\w*).*(\\w*).*).*")]
y[str_detect(y, "(?=.*(\\w*).*(\\w*).*).*")]
str_match_all(x, "(?=.*(\\w*).*(\\w*).*).*")
# n length phrase is repeated twice in string
x[str_detect(x, ".*")]
str_match_all(x, ".*")
str_match_all(x, "a")
str_view_all(x, "a")
str_view_all(x, "(?=.*(\\w*).*(\\w*).*).*")
str_view_all(x, "(?=.*(\\w*).*(\\w*).*)")
str_view_all(x, "(?=.*(\\w*).*\\1.*).*")
str_view_all(x, "eth")
str_view_all(x, "(\\w{3}).*(?<=.*\\1.*\\1.*)")
str_view_all(x, "(\\w{3}).*(?<=\\1.*\\1)")
str_view_all(x, "(?=\\1.\\1)(\\w{3}).*")
str_view_all(x, "(?=\\1.*\\1)(\\w{3}).*")
str_view_all(x, "(?=.*\\1.*\\1)(\\w{3}).*")
str_view_all(x, "(?=.*\\1.*\\1.*)(\\w{3}).*")
str_view_all(x, "^(?=.*\\1.*\\1.*)(\\w{3}).*$")
str_view_all(x, "^(\\w{3}).*(?<=.*\\1.*\\1.*)$")
str_view_all(x, "^(\\w{3}).*\\1.*$")
str_view_all(y, "^(\\w{3}).*\\1.*$")
str_view_all(x, "^(\\w{3}).*\\1.*$")
print(x[str_detect(x,"^(?!.*[g-z].*).*$")])
y <- wordlists$Ranges$y
x <- wordlists$Ranges$x
y <- wordlists$Ranges$y
print(x[str_detect(x,"^(?!.*[g-z].*).*$")])
print(y[str_detect(y,"^(?!.*[g-z].*).*$")])
print(x[str_detect(x,"^(?![g-z].*).*$")])
print(x[str_detect(x,"^(?![g-z]).*$")])
print(y[str_detect(y,"^(?![g-z].*).*$")])
print(y[str_detect(y,"^(?!.*[g-z].*).*$")])
print(y[str_detect(y,"^(?!.*[g-z]).*$")])
print(y[str_detect(y,"^(?![g-z]).*$")])
print(y[str_detect(y,"^(?!.*[g-z]).*$")])
print(y[str_detect(y,"^(?!.*[g-z].*).*$")])
pattern <- "^(?!.*[g-z].*).*$"
print(x[str_detect(x,pattern)])
print(y[str_detect(y,pattern)])
pattern <- "^(?![g-z].*).*$"
print(x[str_detect(x,pattern)])
print(y[str_detect(y,pattern)])
pattern <- "^(?!.*[g-z].*).*$"
print(x[str_detect(x,pattern)])
print(y[str_detect(y,pattern)])
x <- wordlists$Backrefs$x
y <- wordlists$Backrefs$y
x <- wordlists$Backrefs$x
y <- wordlists$Backrefs$y
pattern <- "^(\\w{3}).*\\1.*$"
# n length phrase is repeated twice in string
x[str_detect(x, pattern)]
y[str_detect(y, pattern)]
pattern <- "^(?!.*ick.*).*$"
x <- wordlists$Anchors$x
y <- wordlists$Anchors$y
pattern <- "^(?!.*ick.*).*$"
str_view_all(x, pattern)
pattern <- "ick$"
str_view_all(x, pattern)
pattern <- "^(?<=ick)$^"
str_view_all(x, pattern)
pattern <- "^(?=ick)$^"
str_view_all(x, pattern)
pattern <- "ick$^"
str_view_all(x, pattern)
pattern <- "(?<=ick)$"
str_view_all(x, pattern)
pattern <- "(?<=ick$).*$"
str_view_all(x, pattern)
pattern <- "^(?<=ick$).*$"
str_view_all(x, pattern)
pattern <- "(?=ick)$"
str_view_all(x, pattern)
pattern <- "^.*(?=ick)$"
str_view_all(x, pattern)
pattern <- "ick"
str_view_all(x, pattern)
pattern <- "(?=ick).*"
str_view_all(x, pattern)
pattern <- "(?=ick$).*"
str_view_all(x, pattern)
pattern <- "(?=ick$).*"
str_view_all(y, pattern)
pattern <- "(?=ick$).*"
str_view_all(y, pattern)
pattern <- "(?=ick$).*"
str_view_all(x, pattern)
print(x[str_detect(x, pattern)])
pattern <- "(?=^ick).*"
str_view_all(x, pattern)
pattern <- "(?=ick$).*"
str_view_all(x, pattern)
pattern <- "^.*ick$"
str_view_all(x, pattern)
print(x[str_detect(x, pattern)])
print(y[str_detect(y, pattern)])
print(x[str_detect(x, pattern)])
pat_3_b <- function(vec)
{
# 1 upper, 1 lower, 1 digit, min 8 chars
vec[str_detect(vec, "^(?=.*[A-Z].*)(?=.*[a-z].*)(?=.*\\d.*).{8,}$")]
}
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw3/206039397_stats102a_hw3.R", echo=TRUE)
library(dplyr)
library(stringr)
library(tidyr)
source("206039397_stats102a_hw3.R")
food <- read.csv("food_item.csv")
ingredient <- read.csv("ingredient.csv")
recipe <- read.csv("recipe.csv")
stock <- read.csv("stock.csv")
ingredient %>% filter(recipe == "Beef Burger") %>% pull(food_item)
ingredient %>% filter(str_detect(toupper(food_item),"TOMATO|BREAD"))
food %>% filter(type == "Meat") %>% rename(food_item = item) %>% inner_join(stock, by = "food_item") %>% filter(shop %in% c("MyMart","Coco Mart")) %>% select(-3)
res <- food %>% filter(type == "Wheat product") %>% rename(food_item = item) %>% inner_join(ingredient, by = "food_item") %>% select(recipe) %>% left_join(ingredient, by = "recipe") %>% rename(item = food_item)
# change tomato
res$item[11] <- "Tomato"
res %>% left_join(food, by = "item") %>% group_by(recipe) %>% summarise(Total_Calories = sum(calories))
pat_1_a(names$names)
pat_1_b(names$names)
pat_1_c(names$names)
pat_2_a(cards$cards)
pat_2_b(cards$cards)
pat_3_a(passwords$passwords)
pat_3_b(passwords$passwords)
pat_4_a(wordlists$Ranges$x, wordlists$Ranges$y)
pat_4_b(wordlists$Backrefs$x, wordlists$Backrefs$y)
pat_4_c(wordlists$Anchors$x, wordlists$Anchors$y)
