na.replace(gradebook$Homework_4,10)
is.na(na.replace(gradebook$Homework_4,10))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
na.replace(gradebook$Homework_4,10)
na.replace(gradebook$Homework_4,10)
na.replace(gradebook$Homework_4,10)
na.replace(gradebook$Homework_4,10)
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
sum(is.na(na.replace(gradebook$Homework_4,10)))
na.replace(gradebook$Homework_4,10)
sum(is.na(na.replace(gradebook$Homework_4,10)))
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
gradebook
sum(is.na(gradebook$Homework_4))
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
sum(is.na(gradebook$Homework_4))
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
sum(is.na(gradebook$Homework_4))
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
sum(is.na(gradebook$Homework_4))
gradebook <- gen_gradebook()
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
sum(is.na(gradebook$Homework_4))
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
sum(is.na(gradebook$Homework_4))
ceiling(0.1 * 100)
gradebook <- gen_gradebook()
gradebook
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
sum(is.na(gradebook$Homework_4))
gradebook <- gen_gradebook()
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
sum(is.na(gradebook$Homework_4))
gradebook <- gen_gradebook()
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
sum(is.na(gradebook$Homework_4))
for(i in seq_len(50))
{
gradebook <- gen_gradebook()
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
print(sum(is.na(gradebook$Homework_4)))
}
gradebook$Quiz_4 <- na.replace(gradebook$Quiz_4,10)
sum(is.na(gradebook$Homework_4))
sum(is.na(gradebook$Quiz_4))
# check if center is mean or median
fun <- mean
fun(c(5,4,3))
mean(c(5,4,3))
fun(c(5,4,3))
# df
data.table()
# df
attributes(tibble())
# df
attributes(tibble())$class
"tbl" %in% attributes(tibble())$class
!("tbl" %in% attributes(tibble())$class)
!("tbl" %in% attributes(tibble())$class) &
!("data.frame" %in% attributes(tibble())$class)
# INPUT VALIDATIONS
df <- data.frame(matrix(1:9,ncol=3,nrow=3))
df
df[1,2] <- NA
# INPUT VALIDATIONS
df
rownames(df)
length(df)
# INPUT VALIDATIONS
df <- data.frame(matrix(1:12,nrow=4,ncol = 3))
df[1,3] <- NA
df
length(df)
for(row in seq_len(nrow(df)))
{
print(row)
}
row
df[row,]
df
fun
fun(df[row,])
any(is.na(df[row,]))
row <- 1
any(is.na(df[row,]))
fun(df[row,],na.rm = T)
df[row,]
fun(df[row,],na.rm = T)
fun(df[row,],na.rm = TRUE)
fun(df[row,],na.rm = F)
mean(df[row,],na.rm = F)
mean(df[row,],na.rm = T)
fun
fun <- median
fun
fun <- mean
as.vector(df[row,])
df[row,]
unlist(df[row,])
fun(unlist(df[row,]),na.rm = T)
df%>%subset(row)
unlist(df%>%subset(row)
fun(as.numeric(as.vector(df%>%subset(row))), na.rm = T)
fun(as.numeric(as.vector(df)), na.rm = T)
as.vector(df[row,])
as.numeric(as.vector(df[row,]))
fun(as.numeric(as.vector(df[row,])), na.rm = T)
df[row,]
is.na(df[row,])
which(is.na(df[row,]))
margin = 1
df
row
margin == 1
seq_len(nrow(df))
any(is.na(df[row,]))
impute_val <- fun(as.numeric(as.vector(df[row,])), na.rm = T)
impute_val
for(i in which(is.na(df[row,])))
{
df[row,i] <- impute_val
}
df
df
df[3,1]
df[1,2] <- NA
df[3,1] <- NA
messy_impute <- function(df, center = "mean", margin)
{
# INPUT VALIDATIONS
# df
if(!("tbl" %in% attributes(df)$class) &
!("data.frame" %in% attributes(df)$class))
{stop("input df should be tibble and/or data.frame object")}
# center
if(!is.character(center) | length(center) > 1)
{stop("input center should be type character and length 1")}
if(center != "mean" & center != "median")
{stop("input center can only be \"mean\" or \"median\"")}
# margin
if(!is.numeric(margin) | length(margin) > 1)
{stop("input margin should be numeric and length 1")}
if(margin != 1 & margin != 2)
{stop("input margin can only be 1 or 2")}
# check if center is mean or median
fun <- NULL
if(center == "mean")
{
fun <- mean
}
else
{
fun <- median
}
# row wise NA change
if(margin == 1)
{
for(row in seq_len(nrow(df)))
{
# if there is NA, impute algorithm
if(any(is.na(df[row,])))
{
impute_val <- fun(as.numeric(as.vector(df[row,])), na.rm = T)
# for all NA's in df, change values
for(i in which(is.na(df[row,])))
{
df[row,i] <- impute_val
}
}
}
}
# col wise NA change
else
{
for(col in seq_len(ncol(df)))
{
# if there is NA, impute algorithm
if(any(is.na(df[,col])))
{
impute_val <- fun(as.numeric(as.vector(df[,col])), na.rm = T)
# for all NA's in df, change values
for(i in which(is.na(df[,col])))
{
df[i,col] <- impute_val
}
}
}
}
# done changing NAs
return(df)
}
messy_impute(df,"mean",1)
messy_impute(df,"mean",2)
df
round(fun(as.numeric(as.vector(df[row,])), na.rm = T), digits = 2)
fun(as.numeric(as.vector(df[row,])), na.rm = T)
round(2.3431,2)
df
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
messy_impute(df,"mean",2)
messy_impute(df,"mean",1)
df
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
which(is.na(df[,col]))
col <- 1
which(is.na(df[,col]))
length(NA)
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if(!is.numeric(df[row,col]) | !is.na(df[row,col]) | length(df[row,col]) > 1)
{
stop("input df has invalid assignment values. They should only be numeric(1) or NA")
}
}
}
df
!is.na(df[row,col])
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if(!is.numeric(df[row,col]) | !is.na(df[row,col]) | length(df[row,col]) > 1)
{
print(paste(row,col))
stop("input df has invalid assignment values. They should only be numeric(1) or NA")
}
}
}
df
is.numeric(df[row,col])
!is.na(df[row,col])
length(df[row,col]) > 1
df
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if(!is.numeric(df[row,col]) | !is.na(df[row,col]) | length(df[row,col]) > 1)
{
print(paste(row,col))
stop("input df has invalid assignment values. They should only be numeric(1) or NA")
}
}
}
df[2,2]
df
df[2,"X2"]
df
row
col
is.na(df[row,col])
row <- 1
col <- 1
!is.na(df[row,col])
!is.numeric(df[row,col]) | !is.na(df[row,col]) | length(df[row,col]) > 1
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) | length(df[row,col]) > 1)
{
print(paste(row,col))
stop("input df has invalid assignment values. They should only be numeric(1) or NA")
}
}
}
df
df[1,3]
df[1,3] <- NaN
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) | length(df[row,col]) > 1)
{
print(paste(row,col))
stop("input df has invalid assignment values. They should only be numeric(1) or NA")
}
}
}
df[1,3] <- NULL
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) | length(df[row,col]) > 1)
{
print(paste(row,col))
stop("input df has invalid assignment values. They should only be numeric(1) or NA/NaN")
}
}
}
df[1,3] <- "NULL"
df
df[1,3] <- "HELLO"
df
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) | length(df[row,col]) > 1)
{
print(paste(row,col))
stop("input df has invalid assignment values. They should only be numeric(1) or NA/NaN")
}
}
}
df[1,3] <- NULL
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) | length(df[row,col]) > 1 | is.null(df[row,col]))
{
print(paste(row,col))
stop("input df has invalid assignment values. They should only be numeric(1) or NA/NaN")
}
}
}
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) | length(df[row,col]) > 1 | is.null(df[row,col]))
{
print(paste(row,col))
stop("input df has invalid assignment values. They should only be numeric(1) or NA/NaN")
}
}
}
df[1,3] <- 3
df
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) |
length(df[row,col]) > 1 | is.null(df[row,col]))
{
stop("input df has invalid assignment values. They should only be numeric(1) or NA/NaN")
}
}
}
df
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) |
length(df[row,col]) > 1 | is.null(df[row,col]))
{
stop("input df has invalid assignment values. They should only be numeric(1) or NA/NaN")
}
}
}
df[row,col]
df[1,3]
df[1,2]
df[1,1]
df[1,3] <- 3
df[1,3]
df[1,3] <- as.numeric(3)
df[1,3]
df
class(df$X3)
df$X3 <- as.numeric(df$X3)
class(df$X3)
for(col in colnames(df)[-1])
{
for(row in seq_len(nrow(df)))
{
if((!is.numeric(df[row,col]) & !is.na(df[row,col])) |
length(df[row,col]) > 1 | is.null(df[row,col]))
{
stop("input df has invalid assignment values. They should only be numeric(1) or NA/NaN")
}
}
}
messy_impute(df,"mean",2)
for(col in colnames(df)[-1])
{
df$col <- round(as.double(df$col), digits = 2)
}
df
col
df$col
col
df
as.double(df$col)
col
df[,col]
as.double(df[,col])
round(as.double(df[,col]), digits = 2)
as.double(df[,col])*1,
df[,col]
as.double(df[,col])
as.double(df[,col])*1
as.double(df[,col])/1
# if whole number, turn into char, pad 2 zeros, then
df[row,col]
library(stringr)
library(tidyverse)
library(tidyr)
str_pad(as.character(df[row,col]))
str_pad(as.character(df[row,col]), width = 2)
str_pad(as.character(df[row,col]), width = 2, side = "right", pad = "0")
str_pad(as.character(df[row,col]), width = 3, side = "right", pad = "0")
# if whole number, turn into char, pad 2 zeros, then
char_num <- as.character(df[row,col]
str_pad(), width = 3, side = "right", pad = "0")
# if whole number, turn into char, pad 2 zeros, then
char_num <- as.character(df[row,col])
char_num
# if whole number, turn into char, pad 2 zeros, then
char_num <- paste0(as.character(df[row,col]),".")
char_num
str_pad(char_num, width = 4, side = "right", pad = "0")
as.numeric(str_pad(char_num, width = 4, side = "right", pad = "0"))
as.double(str_pad(char_num, width = 4, side = "right", pad = "0"))
help(format)
# if whole number, turn into char, pad 2 zeros, then
format(df[row,col], nsmall = 2)
# if whole number, turn into char, pad 2 zeros, then
format(df[row,col], nsmall = 2)
# if whole number, turn into char, pad 2 zeros, then
format(round(df[row,col],2), nsmall = 2)
round(df[row,col],2)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
colnames(df)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
!(colnames(df) %in% c("UID","Homework_1",
"Homework_2","Homework_3",
"Homework_4","Homework_5",
"Quiz_1","Quiz_2","Quiz_3",
"Quiz_4","Quiz_5"))
!all(colnames(df) %in% c("UID","Homework_1",
"Homework_2","Homework_3",
"Homework_4","Homework_5",
"Quiz_1","Quiz_2","Quiz_3",
"Quiz_4","Quiz_5"))
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
messy_impute(gradebook,"mean",2)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
gradebook
gradebook
messy_impute(gradebook,"mean",2)[33,]
format(round(49,2), nsmall = 2)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
messy_impute(gradebook,"mean",2)
gradebook
as.numeric("asdf")
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
messy_impute(gradebook,"mean",2)
gradebook <- gen_gradebook()
gradebook
format(round(49,2), nsmall = 2)
format(round(49,2), nsmall = 2)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
gradebook
messy_impute(gradebook,"mean",2)
col
df[,col]
as.numeric(df[,col])
as.numeric(df[,col])
df[,col]
df <- gradebook
df[,col]
col <- "Homework_1"
df[,col]
as.numeric(df[,col])
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
messy_impute(gradebook,"mean",2)
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
gradebook$Quiz_4 <- na.replace(gradebook$Quiz_4,10)
gradebook
messy_impute(gradebook,"mean",2)
messy_impute(gradebook, “median”, 2)
messy_impute(gradebook, "median", 2)
messy_impute(gradebook,"mean",1)
messy_impute(gradebook, "median", 2)
messy_impute(gradebook,"mean",1)
messy_impute(gradebook, "median", 2)
messy_impute(gradebook,"mean",1)
gradebook
df[81,]
round(fun(as.numeric(as.vector(df[81,])), na.rm = T), digits = 2)
round(fun(as.numeric(as.vector(df[81,-1])), na.rm = T), digits = 2)
source("C:/Users/Luke Villanueva/source/repos/LukVill/code/R/stats102a/206039397_stats102a_hw2/206039397_stats102a_hw2.R", echo=TRUE)
messy_impute(gradebook,"mean",1)
gradebook
gradebook$Homework_4 <- na.replace(gradebook$Homework_4,10)
gradebook$Quiz_4 <- na.replace(gradebook$Quiz_4,10)
messy_impute(gradebook,"mean",1)
messy_impute(gradebook, "median", 2)
messy_impute(gradebook,"mean",1)
messy_impute(gradebook, "median", 2, trim = 0.25)
